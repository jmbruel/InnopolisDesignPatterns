
[[It√©rateur]]
== Iterator

ifdef::slides[:leveloffset: -1]

=== The problem

We want to be able:

- to access the content of an object of an aggregate without revealing its
internal representation;
- to manage several routes simultaneously in object aggregates;
- to offer a uniform interface for routes through
various aggregate structures (i.e., to allow iteration
polymorphic).

=== The Iterator pattern

include::pattern/iterator.txt[]

ifdef::slides[=== The Iterator pattern]

ifndef::slides[.Iterator on Google]
image::iterateur-google.png[]


=== Concrete Example

Here is a Ruby example:

ifndef::slides[.Iterator Ruby]
[source,ruby]
----------
# Saluer tout le monde
def say_hi
  if @names.nil?
    puts "..."
  elsif @names.respond_to?("each")
    # @names est une liste de noms : traitons-les uns par uns
    @names.each do |name|
      puts "Hello #{name}!"
    end
  else
    puts "Hello #{@names}!"
  end
end
----------


ifdef::slides[:leveloffset: +1]
