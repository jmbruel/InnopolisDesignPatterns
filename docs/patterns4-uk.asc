
== One step beyond...

ifdef::slides[:leveloffset: -1]

//http://blogs.radiocanut.org/onestpasdescadeaux/2014/02/16/pour-aller-plus-loin-avec-les-non-mixites/
.Crédit photo : http://blogs.radiocanut.org/
image::plusloin.jpg[]

=== Share the same vocabulary

[%step]
- In design meetings (not necessarily with the client)
- With other developers
- In the documentation of your architecture
- In code comments and naming conventions
- In developer groups / blogs
- (not during exams!)

=== Don't go too fast

Some advices:

[%step]
- Patterns are *tools, not rules*.
+
=> Nothing prevents to modify and adapt them to your
problem.
+
- Aim for extensibility *only if the question really arises* in practice,
not if it is only hypothetical.
- Don't get carried away and *look for simplicity*.
+
=> If you find a simpler solution than using a pattern, don't hesitate!
+
- eliminate what is not really necessary.
+
=> Don't be afraid to *remove an unnecessary design pattern* from your design.

=== Other types of patterns

[%step]
- Creation
- Structure
- Behavioral

ifdef::slides[=== Other types of patterns (suite)]

Some more types :

[%step]
- Architectural patterns
- Application patterns
- Domain patterns
- Processus patterns
- Organisational patterns
- UI design patterns

=== Anti-patterns

image::anti-patrons.jpg[scaledwidth=70%]

ifdef::slides[=== Anti-patterns]

[%step]
- Solutions often *wrongly applied* to recurring problems
- Describes how to start from a problem to arrive at a *bad solution*
- Tells you *why* a bad solution is attractive
- Suggest other applicable patterns that can provide better solutions

=== The remaining ones

Many of them:

- Chain of responsibility
- Command
- Decorator
- Façade
- Interpreter
- Mediator
- Memento
- Bridge
- Prototype
- ...


ifdef::slides[:leveloffset: +1]
