
[[Adaptateur]]
== Adaptor

ifdef::slides[:leveloffset: -1]

//.Cr√©dit photo :
image::adaptateur.jpg[]

=== Problem

We want to:

[%step]
- use an existing class, but whose *interface does not coincide* with that expected.
- create a reusable class that collaborates with unrelated classes
with it and still unknown, that is to say with classes that will not have *necessarily compatible interfaces*.
- you need to use several existing subclasses, but
*adaptation of their interface* by derivation of each of them is
impracticable. An object adaptor can adapt the interface of its parent class.
+
NOTE: This last case only concerns the case "object adapter"

=== Concrete example: back on Ducks

- What we have:

ifdef::slides[.Duck class]
[source,java]
----------
public interface Canard {
  public void cancaner();
  public void voler();
}

public class Colvert implements Canard {
  public void cancaner() {
    System.out.println("Coincoin");
  }
  public void voler() {
    System.out.println("Je vole");
  }
}
----------

ifdef::slides[=== Concrete example: back on Ducks]
- The "almost Canard"

ifdef::slides[.The "almost Canard"]
[source,java]
----------
public interface Dindon {
  public void glouglouter();
  public void voler();
}

public class DindonSauvage implements Dindon {
  public void glouglouter() {
    System.out.println("Glouglou");
  }
  public void voler() {
    System.out.println("Je ne vole pas loin");
  }
}
----------

ifdef::slides[=== Concrete example: problem]

For some reason you don't have access to `Canard` objects and you would like to use `Dindon` objects instead!

ifndef::slides[.An "almost Canard" (Credit C. Aribaud, Blagnac Student 2016-2017)]
image::TurkeyToDuck.png[scaledwidth=70%]
ifdef::slides[An "almost Canard" (Credit C. Aribaud, Blagnac Student 2016-2017)]

ifdef::slides[=== Concrete example: solution]

ifdef::slides[.Applying the Adaptor pattern]
[source,java]
----------
public class AdaptateurDindon implements Canard {
  Dindon dindon;

  ...

  public void cancaner() {
    dindon.glouglouter();
  }

  public void voler() {
    // Adaptation du vol
    for(int i=0; i < 5; i++) {
      dindon.voler();
    }
  }
}
----------

=== The Adapter pattern

include::pattern/adaptor.txt[]

ifdef::slides[=== The Adapter pattern]

ifndef::slides[.Adaptater on Google]
image::adaptor-google.png[]


ifdef::slides[:leveloffset: +1]
