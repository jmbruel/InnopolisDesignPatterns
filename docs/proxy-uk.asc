
[[Proxy]]
== Proxy

ifdef::slides[:leveloffset: -1]

=== The problem

We need references to an object, which are more *creative* and more
*sophisticated* than a simple pointer.

=== The _Proxy_ pattern

include::pattern/proxy-uk.txt[]

ifdef::slides[=== The _Proxy_ pattern]

ifndef::slides[.Proxy on Google]
image::proxy-google.png[]

=== Usage

[%step]
- A remote proxy provides a local representative of an object
located in a different address space.
- A _procuration virtual_ creates heavy objects on demand.
- A protection proxy controls access to the original object.
Protective powers of attorney are useful when objects must meet
different access rights.
- A smart reference is the replacement for a raw pointer, which
performs additional operations when accessing the object. A few
typical uses are:
** count of the number of references made to a real object, so that it can be released automatically, as soon as there are no more references;
** load in memory a persistent object when it is referenced for the first time;
** check, before accessing it, that the real object is locked, to be sure that no other object can change it.

=== Concrete Example: RMI

**R**emote **M**ethod **I**nvocation 

ifdef::slides[.Interface distante]
[source,java]
----------
import java.rmi.*;
public interface MonService extends Remote {
  public String direBonjour() throws RemoteException;
}
----------

ifdef::slides[=== Concrete Example: RMI (suite)]

ifdef::slides[.Le service distant (l'impl√©mentation)]
[source,java]
----------
import java.rmi.*;
import java.rmi.server.*;

public class MonServiceImpl extends UnicastRemoteObject implements MonService {
  public String direBonjour() {
    return "Le serveur dit 'Bonjour'";
  }
  public MonServiceImpl() throws RemoteException {}
  public static void main (String[] args) {
    try {
      MonService service = new MonServiceImpl();
      Naming.rebind("BonjourDistant", service);
    } catch(Exception ex) {
      ex.printStackTrace();
    }
  }
}
----------

ifdef::slides[=== Concrete Example: RMI (suite)]

ifdef::slides[.Utilisation]
[source,java]
----------
MonService service =
  (MonService) Naming.lookup("rmi://127.0.0.1/BonjourDistant");
...
service.direBonjour();
----------


ifdef::slides[:leveloffset: +1]
