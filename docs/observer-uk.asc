
[[Observateur]]
== Observer

ifdef::slides[:leveloffset: -1]

//.Cr√©dit Photo :
image::observer.jpg[]

=== Motivation

//-------------- book
ifdef::backend-pdf[]
How to make sure that when a data is modified, all those
who use it are informed and react accordingly.
This is a situation very often encountered in IT.
endif::backend-pdf[]
//--------------------

ifndef::slides[.Classical illustration of the _Observer_ Pattern (source <<Meyer>>)]
image::observer-illustration.png[]

=== Definition

include::pattern/observer-uk.txt[]

=== Application

The _Observer_ pattern can be used in many situations:

[% step]
- When a concept has two aspects, one dependent on the other.
Encapsulating these aspects in separate objects allows them to be used
and let them evolve independently.
- As soon as the change of one object entails the change of several others.
- As soon as an object must notify a certain number of others without knowing them.

[[observerJava]]
=== _Observer_ in Java

{Java} provides _Observable / Observer_ classes for the _Observer_ pattern.
The `java.util.Observable` class is the base class for subjects.
So any class that wants to be observed is that class whose
here are the features:

- provides methods for adding / removing observers
- provides methods for notifying observers
- a concrete subclass must only take care of notifying each
method modifying the state of objects (_mutators_)
- uses a vector storing the references of the observers

The `java.util.Observer` interface corresponds to observers
who must implement this interface.

ifdef::slides[:leveloffset: -1]

==== The java.util.Observable class

Here is the list of methods of the `java.util.Observable` class:

[source,java,linenum]
-----
public Observable()
public synchronized void addObserver(Observer o)
protected synchronized void setChanged()
public synchronized void deleteObserver(Observer o)
protected synchronized void clearChanged()
public synchronized boolean hasChanged()
public void notifyObservers(Object arg)
public void notifyObservers()
-----

==== The java.util.Observer interface

[source,java,linenum]
.java.util.Observer
-----
/**
* This method is called whenever the observed object is changed. An
* application calls an observable object's notifyObservers method to have all
* the object's observers notified of the change.
*
* Parameters:
* o - the observable object
* arg - an argument passed to the notifyObservers method
*/
public abstract void update(Observable o, Object arg)
-----

ifdef::slides[:leveloffset: +2]
