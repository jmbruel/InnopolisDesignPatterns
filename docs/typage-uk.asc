== Importance of typing

ifdef::slides[:leveloffset: -1]

=== Different kinds of typing

Typing = attach a type to a variable.

2 possible ways:

- statically
- dynamically
- _duck typing_

=== Statically

Typing is node at *compilation* time.

.Example 
[source,C]
-----
int i = 0;  // cette déclaration indique explicitement que
            // la variable i est de type entier
-----

=== Dynamically

Typing is node at *execution* time.

ifdef::slides[=== Dynamic typing (example)]

.Example
[source,java]
-------
/**
 * @author André Peninou
 */
public class Type {
  void m() {
    System.out.println ("Type");
    }
}
public class SousType extends Type {
  void m() {
    System.out.println ("SousType");
  }
  void autreM(){
    System.out.println ("Spécifique SousType");
  }
}
...
    Type a = new Type();
    a.m(); // "Type"

    a = new SousType();
    a.m(); // "SousType"
    // Statique : a est un Type (à la compil)
    // Dynamique : a est un SousType au runtime.

    // D'où :
    a = new SousType();
    a.autreM();
    // NOK car type statique == A => autreM() n'existe pas à la compilation
...

-------

=== _Duck typing_

Sort of *typage dynamique* where the *semantics* of an object (its type)
is determind by the set of its *methods* ande *attributes*.

[NOTE]
======
The origin of this expression is attributed James Whitcomb Riley:

[quote, James Whitcomb Riley]
____________________________________________________________________
If I see an animal that flies like a duck, sing like a  duck, and swim like a duck, hence it must be a duck.
____________________________________________________________________
======

ifdef::slides[=== _Duck typing_ (example)]

.Example of _duck typing_  (in Ruby)
[source,ruby]
-----
include::src/ruby/duckTyping.rb[]
-----

WHich results in:

......
20
666, the number of the beast
......

TIP: To go further : http://fr.wikipedia.org/wiki/Duck_typing[]

ifdef::slides[:leveloffset: 0]
