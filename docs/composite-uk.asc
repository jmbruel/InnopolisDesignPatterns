
[[Composite]]
== The Composite pattern

ifdef::slides[:leveloffset: -1]

=== The problem

We want to be able to:

- represent hierarchies of the individual.
- that the customer does not have to worry about the difference between
"combinations of objects" and "individual objects". Customers will be able to process
uniformly all the objects of the composite structure.

=== The Composite pattern

include::pattern/composite-uk.txt[]

ifdef::slides[=== The Composite pattern]

ifndef::slides[.Composite sur Google]
image::composite-google.png[]


=== Concrete Example

ifdef::slides[.Example of Composite in Java]
[source,java]
----------
import java.util.ArrayList;

interface Graphic {
    public void print();
}

class CompositeGraphic implements Graphic {

  private ArrayList<Graphic> mChildGraphics = new ArrayList<Graphic>();

  public void print() {
    for (Graphic graphic : mChildGraphics) {
      graphic.print();
    }
  }

  public void add(Graphic graphic) {
    mChildGraphics.add(graphic);
  }

  public void remove(Graphic graphic) {
    mChildGraphics.remove(graphic);
  }
}
----------

=== An "Anti" example

What do you think of this Composite structure ?

ifndef::slides[.Wrong composite pattern]
image::anti-composite.png[scaledwidth=60%]

ifdef::slides[:leveloffset: +1]
