== Introduction

//Ce cours porte sur la **C**onception et **P**rogrammation **O**bjet **A**vancée.
This course is one advanced OO programming.
//-------------- book
ifdef::backend-pdf[]
It starts with general objects principles (basic OO skills being a pre-requisite for this course),
and address the main principles, the good practices and more spécifically _design patterns_.
endif::backend-pdf[]
//--------------------

ifdef::slides[:leveloffset: -1]

=== Objects

You already know those *objects concepts* :

[%step]
- Abstraction
- Encapsulation
- Inhéritance
- Polymorphisme

//-------------- book
ifdef::backend-pdf[]
Let's quickly review their definitions.
endif::backend-pdf[]
//--------------------

ifdef::slides[:leveloffset: -1]

ifdef::slides[]
==== Abstraction

Definition:

endif::slides[]

==== Abstraction

Definition (restrictive):

[quote]
A class is an *abstraction* of the common characteristics of a set of objects.

ifdef::slides[]
==== Encapsulation

Definition:

endif::slides[]

==== Encapsulation

Definition (restrictive):

[quote]
In an object description, the goal of *encapsulation* is to hide how the object behavior is implemented
(attributes, methods).

ifdef::slides[]
==== Inheritance

Definition:

endif::slides[]

==== Inheritance

Definition (simplistic) :

[quote]
Inheritance is the transmission of some characteristics to its descendants.

The inheriting class possesses the methods and attributes of the `public` and
`protected` levels of its superclass.

ifdef::slides[]
==== Polymorphisme

Coming from the Greek:

endif::slides[]

==== Polymorphisme

Coming from the Greek:

[quote]
Who can take several forms

[IMPORTANT]
====
Inheritance concerns are classes while polymorphism concerns are objects.
====

ifdef::slides[==== Polymorphism (ctd.)]

There are 3 main kind of polymorphism:

[%step]
-  *ad hoc* polymorphism (overloading)
- *parametric* polymorphism (template)
- *inheritance* polymorphism (overriding)

ifdef::slides[:leveloffset: -1]

===== ad hoc polymorphism

- Also called *overloading*.
- Permits to have methods in a class with identical names but with different behavior.
- Permits to define different usage of the same function according to its parameters.

[source,C]
----
int method(int,int);
int method(int);
int method(float,float);
----

===== Parametric polymorphism

Also called *template*.
ifdef::backend-pdf[Here is an example in Java:]

[source,Java]
----
interface Iterator<E> {
    boolean hasNext();
    E next();
}

public <T> static void copy(Collection<? extends T> source, Collection<? super T> dest) {
    for (T t : source) {
         dest.add(t);
    }
}
----

===== Inheritance polymorphism

- Also called *specialization* (or redefinition).
- Related to the overriding of the inherited methods.

ifdef::slides[:leveloffset: +2]


=== Objectives of OO Design
//http://www.regismedina.com/articles/fr/principes-avances-conception-objet/objectifs

We try to avoid 3 big problems faced in Software Development:

[%step]
Rigidity::
Anticipate the evolutions that will impact the application.
Fragility::
Avoid that some modification on one part of the code breaks the whole software.
Immobility::
Allow for easier code extraction.

=== Good practices and patterns

To tackle the aformentioned problems, one solution consists in reducing
*dependances* and avoid the "spaghetti" effect.

The expected values are:

[%step]
- Robustesness: changes do not introduce regressions.
- Extensibility: it is easy to add new functionalities
- Reusability: it is possible to reuse some  parts of the code to build other applications.

ifdef::slides[=== Good practices and patterns (ctd.)]

We are going to learn *good practices*:

[%step]
- Identify those aspects that change and separate them from constant ones
- Program an interface, not an implementation
- Prefer composition than inheritance
- Classes must be open to extension, but closed to modification
- Depend on abstractions not on concrete classes (dependency inversion)
- Don't talk to strangers

ifdef::slides[=== Good practices and patterns (ctd.)]

The next step will be to lear existing good solutions to classical design problems:  *design patterns*.


ifdef::slides[:leveloffset: 0]
