== Visibility matters

[source,java]
----
package UN;
public class A {
  protected String attrprotected;
  String attrfriend; // friend
}
----

If there is a second class in the same _package_:

[source,java]
----
package UN;
  class B {
    ...
    {
        A a = new A ();
        a.attrprotected// OK : même si bizarre
        a.attrfriend  // OK : visible package
    }
  }

package UN;
  class C extends A {
    ...
    {
        this.attrprotected// OK : normal
        this.attrfriend // OK : visible package
    }
  }
----

ifdef::slides[== Visibility matters (ctd.)]

[source,java]
----
package DEUX;
  class B {
      ...
    {
        A a = new A ();
        a.attrprotected// NON OK : normal
        a.attrfriend  // NON OK : normal, proche de "private"
    }
  }

  class C extends A {
      ...
    {
        this.attrprotected// OK : normal car protected et héritage
        this.attrfriend // NON OK : normal, proche de "private"
    }
  }
----

ifdef::slides[== Private ou protected ?]

What's the best for attributes ?

[%step]
- Question of *style* !
- Purists (cf. <<Meyer>>) => `private`
- Sometimes useful: cf. <<strategy,_Strategy_>>, avoid getters/setters

